/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/listing/listado.js":
/*!****************************************!*\
  !*** ./src/scripts/listing/listado.js ***!
  \****************************************/
/***/ (() => {

eval("//import * as listingbc from \"./listing-breadcrumbs.js\";\n//import { listing, googleAdFixed, googleAdInfeed } from '../../data/listadoOld.js';\n//import Mustache from 'mustache';\n\n const paid_ads = parsePaidAds()\n const hasPaidAds = paid_ads.length > 1;\n const data = {\n   ads : listing.ads,\n   paid_ads : paid_ads,\n   paidAdsSection : hasPaidAds\n };\n\nconst template = $('#listado').html();\nconst output = Mustache.render(template, data);\n$('#listado').html(output);\n\nconst urls = paid_ads.map( ad => ad.source );\nloadPaidAds(urls);\n\n // keep track of ad list state\n const adList = {\n   columns : 3,\n   selected : 3,\n   adHeight : 129,\n   adWidth : '100%',\n   paidAds : {\n     length : $(\".paid-ad\").length,\n     list : $(\".paid-ad\"),\n     cyclePosition : 0,\n     intervalId :0\n   }\n }\n\n const paidAds = adList.paidAds;\n initialize()\n\n if (paidAds.length > 1) cyclePaidAds(adList.columns, 0, paidAds.length, paidAds.list);\n\n $(window).on(\"resize\", function() {\n   if (window.innerWidth > 700) {\n     handleAdWidth();\n     setMenuWidth();\n     cyclePaidAds(adList.columns, 0, paidAds.length, paidAds.list);\n   }\n });\n\n // handles the column changer\n $(\".col-changer\").on(\"click\", function(e){\n      $(\".col-changer\").removeClass(\"selected\");\n      $(this).addClass(\"selected\");\n      switch(e.target.id) {\n        case \"tres\":\n          adList.selected = 3;\n        break;\n        case \"cuatro\":\n          adList.selected = 4;\n        break;\n      }\n      handleAdWidth();\n      setMenuWidth();\n      cyclePaidAds(adList.selected, 0, paidAds.length, paidAds.list);\n});\n\n/* HELPER FUNCTIONS */\n\n/**\n  * Adjust width of center section and ad width according to screen size.\n  * @todo refactor as much of this into css as possible. This is only in\n  * javascript because it was the quickest way to handle complex\n  * requirements of the responsive behavior.\n*/\n\nfunction handleAdWidth() {\n  adList.columns = adList.selected;\n  let columns = adList.selected;\n  if (window.innerWidth > 900) {\n      if (columns === 3) {\n        if (window.innerWidth < 1250) {\n          $('.center').css(\"grid-column\", \"2 / 12\");\n        }else if (window.innerWidth > 1600) {\n          $('.center').css(\"grid-column\", \"4 / 10\");\n        }else {\n          $('.center').css(\"grid-column\", \"3 / 11\");\n        }\n      } else if (columns === 4)  {\n        if (window.innerWidth > 1430) {\n          $('.center').css(\"grid-column\", \"3 / 11\");\n        }else if (window.innerWidth <= 1430 && window.innerWidth > 1279) {\n          $('.center').css(\"grid-column\", \"2 / 12\");\n        }else if (window.innerWidth <= 1279) {\n          $('.center').css({\n            \"grid-column\" : \"1 / 13\",\n            \"margin\" : \"0px 10px\",\n          });\n        }\n    }\n    setAdWidth(adList.selected);\n    setPaidAdWidth(adList.selected);\n    setImageDimensions();\n  } if (window.innerWidth <= 900 && window.innerWidth > 700) {\n    $('.center').css(\"grid-column\", \"1 / 13\");\n    setAdWidth(3);\n    setPaidAdWidth(3);\n    setImageDimensions();\n    adList.columns = 3;\n  } else if (window.innerWidth <= 700) {\n    let width = String(window.innerWidth);\n    adList.adWidth = width;\n    $('.center').css('grid-column', '1 / 4');\n    $(\".ad-listing\").css(\"width\", \"100%\");\n    $(\".not-featured\").css(\"width\", \"100%\");\n    $(\".not-featured\").css(\"overflow\", \"hidden\");\n    $(\".ad-listing\").css(\"height\", \"auto\");\n    setPaidAdWidth(2);\n    adList.columns = 2;\n  }\n}\n\n/**\n  * Set the width of the ads so that they maintain a 1:1.15\n  * width to height ratio.\n  * @param {Number} columns Number of columns in the ad listing grid\n*/\n\nfunction setAdWidth(columns) {\n  adList.columns = columns;\n  let padding = 0;\n\n  switch(columns) {\n    case 2:\n      padding = 27;\n    break;\n\n    case 3:\n      padding = 28;\n    break;\n\n    case 4:\n      padding = 29;\n    break;\n\n    default:\n      return;\n  }\n\n  let adsContainerWidth = $(\".ads\").innerWidth();\n  let adWidth = (adsContainerWidth / columns) - padding;\n  let adHeight = adWidth * 1.15;\n\n  /* update the adList fields so they can be used by ads loaded afterwards\n     such as the google ads */\n\n  adList.adWidth = adWidth;\n  adList.adHeight = adHeight;\n\n  //console.log($(\".not-featured\").css(\"color\"));\n  $(\".not-featured\").css(\"width\", String(adWidth) + \"px\");\n  $(\".not-featured\").css(\"height\", String(adHeight) + \"px\");\n}\n\n/**\n  * Adjust menu dimensions based on screen width\n  * @todo refactor this behavior into css.\n*/\n\nfunction setMenuWidth() {\n  if (window.innerWidth > 700) {\n    let menuStart = 0;\n    let center = document\n                 .querySelector('.center')\n                 .style.gridColumn.split(' / ');\n    $('.logo-publish-container').css(\"grid-column\", center[0] + ' / span 1');\n    //$('.publicar').css(\"grid-column\", String(Number(center[0]) + 1) + ' / span 1');\n    $('.items').css(\"grid-column\", String(Number(center[0]) + 2) + ' / ' + center[1]);\n    $('.snackbar').css(\"grid-column\", String(Number(center[1]) - 1));\n    if (window.innerWidth < 950) {\n        $('.items').css(\"grid-column\", String(Number(center[1]) - 2));\n    }\n  }else {\n    $('.logo').css(\"grid-column\", \"3\");\n    $('.snackbar').css(\"grid-column\", \"1\");\n  }\n}\n\nfunction setImageDimensions() {\n  let imageWidth = $('.ad-image').innerWidth();\n  let imageHeight = imageWidth / 1.6;\n  $('.ad-image').css(\"height\", String(imageHeight) + \"px\");\n}\n\nfunction attachPremiumLabels() {\n  $(\".premium\").children(\".premium-label\").css(\"display\", \"flex\");\n}\n\nfunction parsePaidAds() {\n  let rawData = $(\"#paid-ads-data\").text();\n  if (!rawData.trim()) return [];\n  let splitData = rawData.split(\",\");\n  // we intend to divide the list into objects of url source/destination pairs\n  let paidAdsTuples = [];\n  for (let i = 0; i < splitData.length; i+=2) {\n    paidAdsTuples.push({\n      source : splitData[i].trim(),\n      destination :  splitData[i + 1].trim()\n    });\n  }\n  return paidAdsTuples;\n}\n\nfunction setPaidAdWidth(ads) {\n  let paidAds = $(\".paid-ad\");\n  ads = ads > paidAds.length ? paidAds.length : ads;\n  paidAds.css(\"display\", \"none\");\n  for (let i = 0; i < ads; i++) {\n    paidAds[i].style.display = \"block\";\n  }\n}\n\nfunction cyclePaidAds(ads, cyclePosition, length, adList) {\n  clearInterval(paidAds.intervalId);\n  paidAds.intervalId = setInterval(function(){\n    adList.css(\"display\", \"none\");\n    for (let i = 0; i < ads; i++) {\n      adList[cyclePosition % length].style.display = \"block\";\n      cyclePosition++;\n    }\n  }, 6000);\n}\n\n/**\n  * Insert  google ads into the listing grid\n  * @param {Number} frequency Number of normal ads between each google ad.\n*/\n\nfunction placeGoogleAds(frequency) {\n  let ads = $('.not-featured');\n  let googleAd = window.innerWidth > 700 ? googleAdFixed : googleAdInfeed;\n\n  googleAd = googleAd.replace(/WIDTH/g, String(adList.adWidth))\n                     .replace(/HEIGHT/g, String(adList.adHeight))\n\n  // first ad should always be google ad\n\n  $('.ads').prepend(googleAd);\n\n  for (let i = 0; i < ads.length; i++) {\n    if ((i + 1) % frequency === 0 && $(ads.eq(i)[0]).css(\"display\") != 'none') {\n      ads.eq(i).after(googleAd);\n    }\n  }\n}\n\nasync function initialize() {\n  await handleAdWidth();\n  await placeGoogleAds(4);\n  await setMenuWidth();\n  await attachPremiumLabels();\n  //handleMissingVendor();\n  removeBlankPrice();\n  removeBlankField('.location');\n}\n\nfunction handleMissingVendor() {\n  let vendor = $('.vendor');\n  let teaser = $('.listing-row.teaser');\n  for (let i = 0; i < vendor.length; i++) {\n    if (!vendor[i].textContent) {\n      teaser[i].style.display = 'flex';\n    }\n  }\n}\n\nfunction removeBlankField(fieldClass) {\n  let fields = document.querySelectorAll(fieldClass);\n  for (let field of fields) {\n    if (!field.innerText) $(field).remove();\n  }\n}\n\nfunction removeBlankPrice() {\n  const prices = document.querySelectorAll('.price');\n  Array.from(prices).forEach( price => {\n    if (price.textContent === \"$\") price.textContent = \"\";\n  });\n\n}\n\nfunction imgLoad(img, url) {\n  return new Promise( (res, rej) => {\n    img.onload = () => res(img);\n    img.onerror = rej;\n    img.src = url;\n  });\n}\n\nfunction renderPaidAds() {\n  const container = document.querySelector(\".client-rendering\");\n  const paidAds = Array.from(container.childNodes);\n  container.remove();\n  const adImages = document.querySelector(\".paid-ads-images\");\n\n  Array.from(adImages.childNodes).forEach( node  => {\n    node.remove();\n  });\n\n  paidAds.forEach(ad => {\n    adImages.append(ad);\n  });\n}\n\nasync function loadPaidAds(urls) {\n  const images = Array.from( document.querySelectorAll('.image.paid-ad img') )\n\n  const complete = images.map( async (img,i) => {\n    const load = await imgLoad(img, urls[i]);\n    return load.complete;\n  })\n\n  Promise.all(complete).then(vals => {\n    // if completes are all true\n    if (!vals.includes(false)){\n      renderPaidAds();\n    }\n  })\n\n}\n\n\n//# sourceURL=webpack://clasitronicos/./src/scripts/listing/listado.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/scripts/listing/listado.js"]();
/******/ 	
/******/ })()
;